{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Start","text":""},{"location":"index.html#introduction","title":"Introduction","text":"<p>This is a substitute for the official mappAssetInt package. The goal is to provide a community version that almost matches the official version. </p>"},{"location":"index.html#compatibility","title":"Compatibility","text":"<p>Here is a short list of differences between the official mappAssetInt and the community version. For the detailed description see the compatibility page.</p>"},{"location":"index.html#what-is-missing","title":"What is missing","text":"<ul> <li>There is no configuration file in Automation Studio under the configuration view. The configuration is done in the task code.</li> <li>There is no integration for mappAlarmX. Since the official version only supported 3 alarms this was removed. The community version provides a rich set of status information that can be used to trigger alarms. See appendix for the corresponding error numbers and the FAQ for more information.</li> </ul>"},{"location":"index.html#what-is-different","title":"What is different","text":""},{"location":"index.html#general","title":"General","text":"<ul> <li>The prefix of all function block names was changed from Mp to ex. For example MpAssetIntCore was changed to exAssetIntCore.</li> <li>The prefix of all data type names was changed from Mp to ex. For example MpAssetIntCoreInfoType was changed to exAssetIntCoreInfoType. The new structures are identical to the official structures. All exceptions are documented in the compatibility page.</li> <li>The MpLink was replaced with a remanent variable of type exAssetIntLinkType. This structure is used to store important data during power off and for cross communication between function blocks.</li> <li>All data is stored in a ring buffer consisting of individual files. Each file contains one event. An event can be job or shift change or a downtime event. You can find more details about the data management in the appendix.</li> <li>The parameter \"EnableFileBackup\" is no longer required and was removed from the core config structure. The data is always stored in the flash memory.</li> <li>The parameters \"SaveInterval\", \"RecordMemory\", \"RecordingSizeShiftStatistics\" and \"RecordingSizeJobStatistics\" are no longer required and were removed from the general config structure.</li> <li>The data structure \"exAssetIntUITimelineOutputType\" was adjusted to match the other UI structures. Al data from the parameter \"Display\" was moved one level up to \"UIConnect.Output\".</li> </ul>"},{"location":"index.html#exassetintcore","title":"exAssetIntCore","text":"<ul> <li>The parameter StorageDevice was added. This is where the event data is stored.</li> </ul>"},{"location":"index.html#exassetintshiftlistui","title":"exAssetIntShiftListUI","text":"<ul> <li>The parameter UISetup.OutputListSize was removed. The list size is now defined by the constant UI_SHIFT_LIST_IDX.</li> <li>The parameter UISetup.SortingStartTime was added to allow for ascending and descending sorting.</li> </ul>"},{"location":"index.html#exassetintjoblistui","title":"exAssetIntJobListUI","text":"<ul> <li>The parameter UISetup.OutputListSize was removed. The list size is now defined by the constant UI_JOB_LIST_IDX.</li> <li>The parameter UISetup.SortingStartTime was added to allow for ascending and descending sorting.</li> </ul>"},{"location":"index.html#exassetinttimelineui","title":"exAssetIntTimelineUI","text":"<ul> <li>The parameter UISetup.TimelineListSize was removed. The list size is now defined by the constant UI_TIMELINE_IDX.</li> <li>The parameter UISetup.SortingStartTime was added to allow for ascending and descending sorting.</li> <li>All parameters from UIConnect.Output.Display were move one level up to UIConnect.Output to harmonize the data structure with the other function blocks.</li> </ul>"},{"location":"index.html#what-is-new","title":"What is new","text":"<ul> <li>Most function blocks have an additional Logger input. This is used to log messages to the console. This is useful for debugging purposes.</li> <li>Job events can also be listed in the shift UI list. This can be changed with the UI_SHIFT_SHOW_JOBS constant.</li> <li>User name changes are logged in the timeline.</li> <li>User downtime reason changes are logged in the timeline.</li> </ul>"},{"location":"index.html#future-development","title":"Future development","text":"<p>The goal for version 1.x is to have a complete set of functions that match the official mappAssetInt package. Version 2.x will focus on adding new features and improvements and will be optimized to work with mappView.</p>"},{"location":"index.html#requirements","title":"Requirements","text":"<p>The sample was developed with Automation Studio 4.12 but may also work with versions below that.</p>"},{"location":"appendix.html","title":"Appendix","text":""},{"location":"appendix.html#appendix","title":"Appendix","text":""},{"location":"appendix.html#how-the-data-is-stored","title":"How the data is stored","text":"<p>Short term data like piece counters are stored in the remanent variable of type <code>exAssetIntLinkType</code>. This structure is used for cross function block communication. The short term data will survive a power off but not a cold reboot. </p> <p>All long term data is stored in a ring buffer consisting of individual files on the user partition. Data on this user partition will survive restarts and even program updates and be backed up if necessary. Each file contains one event. An event can be a production state, job or shift change or a downtime event. The total number of stored events can be adjusted with the constant <code>CORE_EVENT_NUM_MAX</code>. Keep in mind that all events must be loaded on boot-up which can take some time. As a ball park figure, it takes about 4 seconds to load 100 events.</p>"},{"location":"appendix.html#constants","title":"Constants","text":""},{"location":"appendix.html#common","title":"Common","text":"Name Type Value Description CORE_FOLDER_NAME STRING[50] AssetIntData Name of the event data folder CORE_EVENT_NUM_MAX UINT 500 Maximum number of events CORE_BACKUP_TIMER UINT 10 Backup timer (minutes) for internal data EVENT_ADDITONAL_DATA_LEN UINT 100 Length of the event comment EXPORT_BUFFER UINT 500 Length of the buffer for the event export EXPORT_JOB_TITEL STRING[100] 'AssetInt Job Statistics Export File' Export file header EXPORT_SHIFT_TITEL STRING[100] 'AssetInt Shift Statistics Export File' Export file header EXPORT_TIMELINE_TITEL STRING[100] 'AssetInt Timeline Statistics Export File' Export file header EXPORT_JOB_HEADER STRING[400] 'Job Start Time;Job End Time;Job Name;...' Export file column headers EXPORT_SHIFT_HEADER STRING[400] 'Job Start Time;Job End Time;Job Name;...' Export file column headers EXPORT_TIMELINE_HEADER STRING[400] 'Start Time;Shift ID;Production State;...' Export file column headers UI_SHIFT_LIST_IDX UINT 8 Max index for list box entries for shift data UI_JOB_LIST_IDX UINT 8 Max index for list box entries for job data LOG_LEN UINT 100 Length of one log entry (minimum size is 50) LOG_NUM UINT 50 Number of log entries LOG_LEVEL exAssetIntLogLevelEnum exASSETINT_LOG_ALL Define log level details CHAR_RETURN USINT 13 Carriage return"},{"location":"appendix.html#errors","title":"Errors","text":"Name Type Value Description ERR_ASSET_LINK DINT -1064239102 Input exLink is 0 pointer ERR_ASSET_TEMP_MEMORY DINT -1064136704 No temporary memory available, make sure core function block is enabled ERR_ASSET_INF_WAIT_CORE_FB DINT 1083346949 This component can only become active if MpAssetIntCore is active. ERR_ASSET_READ_RECORD_SIZE DINT -2138009590 Record size is not correct during reading event data ERR_ASSET_READ_CRC DINT 100000 Record CRC error during reading event data ERR_ASSET_CONFIG DINT -1064239096 Configuration link is 0 pointer ERR_ASSET_SHIFT_CALC DINT -1064239097 Invalid shift configured"},{"location":"revision.html","title":"Revision","text":""},{"location":"revision.html#14112024","title":"14.11.2024","text":"<p>First release</p>"},{"location":"compatibility/compatibility.html","title":"Compatibility","text":"<p>The goal is to provide a community version that almost matches the official version. However this is not possible for some components. There is no AssetInt configuration file in Automation Studio under the configuration view. The configuration is done through code. This is similar to using the official function block MpAssetIntCoreConfig.</p> <p>For a general description of mappAssetInt see Automation Studio help </p> <ul> <li>(7f7c4218-cad1-406e-9c36-3e8b54e4c5c2) for a description of the offical mappAssetInt</li> </ul>"},{"location":"compatibility/compatibility.html#function-blocks-compared-to-the-official-version","title":"Function blocks compared to the official version","text":""},{"location":"compatibility/compatibility.html#mpassetintcore","title":"MpAssetIntCore","text":"<p>For constants used in the function block see constants.</p> Original New I/O Parameter Data type Description IN exLink Pointer to exAssetIntLinkType Remanent variable structure that contains short term data for cross function block communication. IN Enable BOOL The function block is active as long as this input is set. IN ErrorReset BOOL Resets function block errors. IN Parameters Pointer to <code>exAssetIntParType</code> Parameters of the function block. IN (NEW) Logger Pointer to STRING[LOG_LEN][0..LOG_NUM] String array for logger messages. IN (NEW) Configuration Pointer to <code>exAssetIntCoreConfigType</code> Structure used to specify the configuration. IN Update BOOL Updates the parameters on a rising edge of the input. IN Downtime <code>exAssetIntDowntimeEnum</code> Indicates downtime. IN DowntimeReason Pointer to STRING[50] Reason for the downtime. IN PieceCounter UDINT Number of products manufactured. IN RejectCounter UDINT Number of rejected products. IN DeviceName Pointer to STRING[50] File device (data storage medium) where data is exported to. IN  (NEW) StorageName Pointer to STRING[50] File device (data storage medium) where the files are stored. IN Export BOOL Exports statistical data regarding overall equipment effectiveness. IN Reset BOOL Resets the data in the internal buffer. OUT Active BOOL Function Block active. OUT Error BOOL Error occurred during execution. OUT StatusID DINT Status information. OUT UpdateDone BOOL Parameter update completed. OUT CurrentProductionRate REAL Current production rate. OUT ScheduledDowntimeRate REAL Scheduled downtime rate. OUT UnscheduledDowntimeRate REAL Unscheduled downtime rate. OUT NominalProductionTimeRate REAL Production time rate at machine's nominal speed. OUT BadPieceRate REAL Rate of bad products. OUT ExportDone BOOL Export successfully executed by function block. OUT Info <code>exAssetIntCoreInfoType</code> Additional function block information."},{"location":"compatibility/compatibility.html#mpassetintcoreconfig","title":"MpAssetIntCoreConfig","text":"<p>For constants used in the function block see constants.</p> Original New I/O Parameter Data type Description IN exLink Pointer to exAssetIntLinkType Remanent variable structure that contains short term data for cross function block communication. configuration). IN Enable BOOL The function block is active as long as this input is set. IN ErrorReset BOOL Resets function block errors. IN (NEW) Device Name Pointer to STRING[50] File device (data storage medium) where the files are stored. IN (NEW) Logger Pointer to STRING[LOG_LEN][0..LOG_NUM] String array for logger messages. IN Configuration Pointer to <code>exAssetIntCoreConfigType</code> Structure used to specify the configuration. IN Load BOOL Loads the configuration of the component. IN Save BOOL Saves the configuration of the component. IN Active BOOL Function block active. OUT Error BOOL Error occurred during execution. OUT StatusID DINT Status information. OUT CommandDone BOOL Execution successful. Function block is finished. OUT Info Pointer to <code>exAssetIntInfoType</code> Additional function block information."},{"location":"conversion/conversion.html","title":"Conversion","text":"<p>This guide provides details how to convert the official mappAssetInt package to the community version.</p>"},{"location":"conversion/conversion.html#installation","title":"Installation","text":"<p>The fastest way to convert the official mappAssetInt package to a community version is to use the package from the sample as a template. Copy the package \"exAssetInt\" into your project.</p>"},{"location":"conversion/conversion.html#transfer-existing-configuration","title":"Transfer existing configuration","text":"<p>Open the assetInt configuration in the configuration view. Everything above \"Shifts\" can be ignored. Write down the shift details. </p> <p>Open the sample task and transfer the shift details into the init section of the task. The example uses an additional structure for the shift data for better integration into visual components. The cyclic tasks then translates this data into the configuration structure. The data can also be entered into the configuration structure (exAssetIntConfig.Shifts[]) directly as \"Time Of Day\" value.</p> <pre><code>// ---------------------------------------------------------------------------------------------\n// Shift configuration\ngShift[0].Name := 'Morning';\ngShift[0].Start.Hour := 8;\ngShift[0].Start.Minutes := 0;\ngShift[0].End.Hour := 14;\ngShift[0].End.Minutes := 0;\ngShift[0].ScheduledDowntime[0].Reason := 'Breakfast';\ngShift[0].ScheduledDowntime[0].Start.Hour := 9;\ngShift[0].ScheduledDowntime[0].End.Hour := 9;\ngShift[0].ScheduledDowntime[0].End.Minutes := 15;\n\ngShift[1].Name := 'Afternoon';\ngShift[1].Start.Hour := 14;\ngShift[1].Start.Minutes := 0;\ngShift[1].End.Hour := 22;\ngShift[1].End.Minutes := 0;\n\ngShift[2].Name := 'Night';\ngShift[2].Start.Hour := 22;\ngShift[2].Start.Minutes := 0;\ngShift[2].End.Hour := 8;\ngShift[2].End.Minutes := 0;\n</code></pre> <p>The export configuration is entered using the same structure. Export parameters are optional. You can also use the default values.</p> <pre><code>// ----------------------------------------------------------------------------------------------\n// Export configuration\nexAssetIntConfig.Export.DecimalMark := ',';\nexAssetIntConfig.Export.ColumnSeparator := ';';\n\nexAssetIntConfig.Export.ShiftStatistics := TRUE;\nexAssetIntConfig.Export.ShiftStatisticsFileNamePattern := 'ShiftStatistics_%Y_%m_%d_%H_%M.csv';\n\nexAssetIntConfig.Export.JobStatistics := TRUE;\nexAssetIntConfig.Export.JobStatisticsFileNamePattern := 'JobStatistics_%Y_%m_%d_%H_%M.csv';\n\nexAssetIntConfig.Export.Timeline := TRUE;\nexAssetIntConfig.Export.TimelineFileNamePattern := 'Timeline_%Y_%m_%d_%H_%M.csv';\n</code></pre>"},{"location":"conversion/conversion.html#additional-configuration","title":"Additional configuration","text":"<p>The only mandatory additional configuration is the device name. Since the community version uses the flash card to store data it is necessary to enter the device name. The device name is defined under the CPU configuration under file devices.</p> <p></p> <pre><code>DeviceName := 'USER_HD';\n</code></pre>"},{"location":"conversion/conversion.html#optional-configuration","title":"Optional configuration","text":"<p>The default configuration should work for most applications. However, the following parameters can be adjusted if necessary. For a detailed description see the appendix.</p> <p></p>"},{"location":"conversion/conversion.html#connect-the-function-blocks-and-structures-to-other-tasks-or-visual-components","title":"Connect the function blocks and structures to other tasks or visual components","text":"<p>All function blocks and variable structures have the exact same name as before. The only difference is the prefix. The prefix \"Mp\" was changed to \"ex\". For example, \"MpAssetIntCore\" was changed to \"exAssetIntCore\".</p>"},{"location":"conversion/conversion.html#remove-old-assetint","title":"Remove old AssetInt","text":"<p>To remove the old assetInt configuration delete configuration file under the configuration view. If there is no other mappService used you can also set the mappService to \"not defined\".</p> <p></p> <p>If there are other mappServices used, you can remove the assetInt service by deleting the library MpAssetInt.</p> <p></p>"},{"location":"conversion/conversion.html#addition-notes","title":"Addition notes","text":"<ul> <li> <p>The parameter \"EnableFileBackup\" is no longer required and was removed from the core config structure. The data is always stored in the flash memory.</p> </li> <li> <p>The parameters \"SaveInterval\", \"RecordMemory\", \"RecordingSizeShiftStatistics\" and \"RecordingSizeJobStatistics\" are no longer required and were removed from the general config structure.</p> </li> </ul>"},{"location":"faq/faq.html","title":"FAQs","text":""},{"location":"faq/faq.html#faqs","title":"FAQs","text":""},{"location":"faq/faq.html#how-is-the-data-recorded","title":"How is the data recorded?","text":"<p>Data is only recorded when the PLC is running and the current time is within the configured shift times and there is no scheduled or unscheduled downtime. Is the PLC is turned of during a shift the time is not considered downtime. </p>"},{"location":"faq/faq.html#how-and-where-is-the-data-stored","title":"How and where is the data stored?","text":"<p>Short term data like piece counters are stored in the remanent variable of type <code>exAssetIntLinkType</code>. This structure is used for cross function block communication. The short term data will survive a power off but not a cold reboot. </p> <p>All long term data is stored in a ring buffer consisting of individual files on the user partition. Data on this user partition will survive restarts and even program updates and be backed up if necessary. Each file contains one event. An event can be job or shift change or a downtime event. The total number of stored events can be adjusted with the constant <code>CORE_EVENT_NUM_MAX</code>. Keep in mind that all events must be loaded on boot-up which can take some time. As a ball park figure, it takes about 4 seconds to load 100 events.</p> <p>When the data is loaded all files are checked against a CRC as well as the file size. If a file is corrupt it is deleted and the error is logged. To recover from this error the input <code>ErrorReset</code> must be set to true. When there are no more corrupt files the system will recover and continue to load the remaining files. Only one file is deleted at a time.</p>"},{"location":"faq/faq.html#what-task-class-should-be-used","title":"What task class should be used?","text":"<p>It is recommended to use task class #8 with a 10ms cycle time.</p>"},{"location":"faq/faq.html#how-do-i-increase-the-number-of-events-stored","title":"How do I increase the number of events stored?","text":"<p>The constant <code>CORE_EVENT_NUM_MAX</code> defines the maximum number of events that can be stored. This number can be increased to store more events. Keep in mind that all events must be loaded on boot-up which can take some time.</p>"},{"location":"faq/faq.html#how-can-i-diagnose-a-problem-with-the-function-block","title":"How can I diagnose a problem with the function block?","text":"<p>Most function blocks have an additional Logger input. This logger provides detailed information about events that occur inside the framework. The log level can be set with the constant <code>LOG_LEVEL</code>. The default log level is <code>exASSETINT_LOG_ERROR</code>. The log level can be set to <code>exASSETINT_LOG_OFF</code> to disable logging. The log level can be set to <code>exASSETINT_LOG_ALL</code> to log everything. The log level can be set to <code>exASSETINT_LOG_INFO</code> to log errors, warnings, and information messages. The log level can be set to <code>exASSETINT_LOG_ALL</code> to log everything. Only use <code>exASSETINT_LOG_ALL</code> for debugging purposes as it can slow down the system.</p> <p>All functions blocks have an additional <code>StatusID</code> output. Check the appendix for the corresponding error numbers. </p> <p>Most function blocks have an additional <code>Info</code> output. This structure contains additional information about the function block. </p>"}]}